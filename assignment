Find the Nth term of the Fibonacci series:

#include <stdio.h>

int fibonacci(int n) {
    if (n <= 1) {
        return n;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

int main() {
    int N;
    printf("Enter the value of N: ");
    scanf("%d", &N);
    
    int result = fibonacci(N);
    
    printf("The %dth term of the Fibonacci series is %d\n", N, result);
    
    return 0;
}
Print the first N terms of the Fibonacci series:

#include <stdio.h>

int main() {
    int N, first = 0, second = 1, next;
    printf("Enter the value of N: ");
    scanf("%d", &N);
    
    printf("Fibonacci Series: ");
    
    for (int i = 0; i < N; i++) {
        if (i <= 1) {
            next = i;
        } else {
            next = first + second;
            first = second;
            second = next;
        }
        printf("%d ", next);
    }
    
    printf("\n");
    
    return 0;
}
Check whether a given number is in the Fibonacci series or not:

#include <stdio.h>
#include <math.h>

int isPerfectSquare(int x) {
    int s = sqrt(x);
    return (s * s == x);
}

int isFibonacci(int n) {
    return isPerfectSquare(5 * n * n + 4) || isPerfectSquare(5 * n * n - 4);
}

int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);
    
    if (isFibonacci(num)) {
        printf("%d is in the Fibonacci series.\n", num);
    } else {
        printf("%d is not in the Fibonacci series.\n", num);
    }
    
    return 0;
}
Calculate the HCF (Highest Common Factor) of two numbers:

#include <stdio.h>

int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

int main() {
    int num1, num2;
    printf("Enter two numbers: ");
    scanf("%d %d", &num1, &num2);
    
    int result = gcd(num1, num2);
    
    printf("HCF of %d and %d = %d\n", num1, num2, result);
    
    return 0;
}
Check whether two given numbers are co-prime numbers or not:

#include <stdio.h>

int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

int main() {
    int num1, num2;
    printf("Enter two numbers: ");
    scanf("%d %d", &num1, &num2);
    
    if (gcd(num1, num2) == 1) {
        printf("%d and %d are co-prime numbers.\n", num1, num2);
    } else {
        printf("%d and %d are not co-prime numbers.\n", num1, num2);
    }
    
    return 0;
}
Print all prime numbers under 100:

#include <stdio.h>
#include <stdbool.h>

bool isPrime(int n) {
    if (n <= 1) {
        return false;
    }
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

int main() {
    printf("Prime numbers under 100: ");
    for (int i = 2; i < 100; i++) {
        if (isPrime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
    
    return 0;
}
Print all prime numbers between two given numbers:

#include <stdio.h>
#include <stdbool.h>

bool isPrime(int n) {
    if (n <= 1) {
        return false;
    }
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

int main() {
    int start, end;
    printf("Enter the range (start and end): ");
    scanf("%d %d", &start, &end);
    
    printf("Prime numbers between %d and %d: ", start, end);
    for (int i = start; i <= end; i++) {
        if (isPrime(i)) {
            printf("%d ", i);
        }
    }
    printf("\n");
    
    return 0;
}
Find the next prime number after a given number:

#include <stdio.h>
#include <stdbool.h>

bool isPrime(int n) {
    if (n <= 1) {
        return false;
    }
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

int nextPrime(int n) {
    n++;
    while (!isPrime(n)) {
        n++;
    }
    return n;
}

int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);
    
    int result = nextPrime(num);
    
    printf("The next prime number after %d is %d\n", num, result);
    
    return 0;
}
Check whether a given number is an Armstrong number or not:

#include <stdio.h>
#include <math.h>

int isArmstrong(int num) {
    int originalNum, remainder, result = 0, n = 0;
    originalNum = num;

    // Count the number of digits
    while (originalNum != 0) {
        originalNum /= 10;
        ++n;
    }

    originalNum = num;
    while (originalNum != 0) {
        remainder = originalNum % 10;
        result += pow(remainder, n);
        originalNum /= 10;
    }

    if (result == num) {
        return 1;  // It's an Armstrong number
    } else {
        return 0;  // It's not an Armstrong number
    }
}

int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);
    
    if (isArmstrong(num)) {
        printf("%d is an Armstrong number.\n", num);
    } else {
        printf("%d is not an Armstrong number.\n", num);
    }
    
    return 0;
}
